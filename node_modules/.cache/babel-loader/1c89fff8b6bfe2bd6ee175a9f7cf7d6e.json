{"ast":null,"code":"var _jsxFileName = \"/home/larissa/Documentos/Front-Rocket/02-dtmoney-front/dtmoney/src/TransactionContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { api } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext({});\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transaction').then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transaction) {\n    const response = await api.post('/transaction', transaction);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["/home/larissa/Documentos/Front-Rocket/02-dtmoney-front/dtmoney/src/TransactionContext.tsx"],"names":["createContext","useEffect","useState","api","TransactionsContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transaction","post"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAA8D,OAA9D;AACA,SAASC,GAAT,QAAoB,gBAApB;;AAsBA,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAC9C,EAD8C,CAAzC;AAIP,OAAO,SAASK,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAAsE;AAAA;;AAC3E,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAgB,EAAhB,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CAACM,GAAJ,CAAQ,aAAR,EACGC,IADH,CACQC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADnC;AAED,GAHQ,EAGN,EAHM,CAAT;;AAKA,iBAAeM,iBAAf,CAAiCC,WAAjC,EAA+D;AAC7D,UAAMH,QAAQ,GAAG,MAAMR,GAAG,CAACY,IAAJ,CAAS,cAAT,EAAyBD,WAAzB,CAAvB;AACD;;AAED,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEP,MAAAA,YAAF;AAAgBM,MAAAA;AAAhB,KAArC;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAlBeD,oB;;KAAAA,oB","sourcesContent":["import { createContext, useEffect, useState, ReactNode } from 'react';\nimport { api } from './services/api';\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\ninterface TransactionsProviderProps {\n  children: ReactNode;\n}\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nexport const TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n);\n\nexport function TransactionsProvider({ children }: TransactionsProviderProps){\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    api.get('transaction')\n      .then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transaction: TransactionInput){\n    const response = await api.post('/transaction', transaction)\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  )\n\n}"]},"metadata":{},"sourceType":"module"}